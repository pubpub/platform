---
import { expect } from "utils/assert";

import type { FileUpload } from "../../layouts/Layout.astro";
import PubAbstract from "../../components/PubAbstract.astro";
import PubContent from "../../components/PubContent.astro";
import PubHeader from "../../components/PubHeader.astro";
import PubSidebar from "../../components/PubSidebar.astro";
import Layout from "../../layouts/Layout.astro";
import { getClient } from "../../lib/client/client";
import { getHeader, getJournal, getJournalArticles } from "../../lib/client/queries";
import { getFieldValue } from "../../lib/getValue";

const { slug } = Astro.params;

export async function getStaticPaths() {
	const [journalArticles, journal, header] = await Promise.all([
		getJournalArticles(),
		getJournal({
			depth: 1,
			withRelatedPubs: true,
		}),
		getHeader(),
	]);

	const paths = journalArticles.map((pub) => ({
		params: {
			slug: expect(pub.values?.find((value) => value.fieldName === "Slug")?.value),
		},
		props: { pub, journal, header },
	}));

	return paths;
}

const { pub, journal, header } = Astro.props;
console.log("header", header);

const title = getFieldValue<string>(pub, "Title");
const abstract = getFieldValue<string>(pub, "Abstract");
const publicationDate = getFieldValue<string>(pub, "Publication Date");
const lastEdited = getFieldValue<string>(pub, "Last Edited");
const doi = getFieldValue<string>(pub, "DOI");
const volume = getFieldValue<string>(pub, "Issue Volume");
const issueNumber = getFieldValue<string>(pub, "Issue Number");
const content = getFieldValue<string>(pub, "PubContent");
const headerImage = getFieldValue<FileUpload | undefined>(pub, "Header Background Image");
const headerTextStyle = getFieldValue<string>(pub, "Header Text Style");
const headerTheme = getFieldValue<string>(pub, "Header Theme");
console.log(headerImage);

// Assuming contributors are in the values array
const contributors = pub.values?.filter((value) => value.fieldName === "Contributors") || [];

// Calculate months since last update
const getMonthsAgo = (dateString: string) => {
	if (!dateString) return "";
	const lastEditDate = new Date(dateString);
	const now = new Date();
	const months =
		(now.getFullYear() - lastEditDate.getFullYear()) * 12 +
		now.getMonth() -
		lastEditDate.getMonth();
	return `${months} months ago`;
};

const formatDate = (dateString: string) => {
	if (!dateString) return "";
	return new Date(dateString).toLocaleDateString("en-US", {
		month: "short",
		day: "numeric",
		year: "numeric",
	});
};
---

<Layout journal={journal} title={title} header={header}>
	<!-- Header Component -->
	<PubHeader
		title={title}
		doi={doi}
		issueNumber={issueNumber}
		publicationDate={publicationDate}
		lastEdited={lastEdited}
		contributors={contributors}
		headerImage={headerImage}
		formatDate={formatDate}
		getMonthsAgo={getMonthsAgo}
	/>

	<!-- Main Content Area -->
	<div class="bg-gray-50 pt-8 pb-16">
		<div class="container mx-auto px-4">
			<div class="flex flex-col lg:flex-row gap-8">
				<!-- Left Column (Main Content) -->
				<div class="lg:w-3/4">
					<PubAbstract abstract={abstract} />
					<PubContent content={content} />
				</div>

				<!-- Right Column (Sidebar) -->
				<div class="lg:w-1/4 lg:sticky lg:top-4 self-start">
					<PubSidebar />
				</div>
			</div>
		</div>
	</div>
</Layout>
