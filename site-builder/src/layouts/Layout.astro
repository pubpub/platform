---
import type { NonGenericProcessedPub } from "contracts";

import HeaderNav from "../components/HeaderNav.astro";
import NavMenu from "../components/NavMenu";
import { getFieldValue, getRelatedPubs } from "../lib/getValue";

export interface Props {
	journal: NonGenericProcessedPub;
	title?: string;
	header: NonGenericProcessedPub;
}

const journal = Astro.props.journal;
const title = Astro.props.title;
const header = Astro.props.header;

export type FileUpload = {
	id: string;
	fileName: string;
	fileSource: string;
	fileType: string;
	fileSize: number | null;
	fileMeta: Record<string, unknown>;
	fileUploadUrl: string;
	filePreview?: string;
}[];

const journalTitle = getFieldValue<string>(journal, "Title");
const avatar = getFieldValue<FileUpload | undefined>(journal, "Avatar");
const favicon = getFieldValue<FileUpload | undefined>(journal, "Favicon");
const avatarUrl = avatar ? avatar[0]?.fileUploadUrl : "/favicon.svg";
const faviconUrl = favicon ? favicon[0]?.fileUploadUrl : "/favicon.svg";

// Get navigation menus and links
const navigationTargets = getRelatedPubs(header, "Navigation Targets");
console.log(header);

// Filter navigation items by type
const navMenus =
	navigationTargets?.filter((target) => target?.pubType?.name === "Navigation Menu") || [];
console.log(navigationTargets);
const navLinks =
	navigationTargets?.filter((target) => {
		const pubType = target?.pubType?.name;
		return pubType === "Navigation Link" || (pubType && pubType !== "Navigation Menu");
	}) || [];

const heroText = getFieldValue<string>(journal, "Hero Text");
const accentColorLight = getFieldValue<string>(journal, "Accent Color Light");
const accentColorDark = getFieldValue<string>(journal, "Accent Color Dark");

const getStringFieldValue = getFieldValue<string>;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" href={faviconUrl} />
		<meta name="generator" content={Astro.generator} />
		<title>{title ? `${title} | ${journalTitle}` : journalTitle}</title>
	</head>
	<body>
		<div class={`text-white p-6`} style={`background-color: ${accentColorDark}`}>
			<div class="container mx-auto">
				<!-- Top navigation with search, dashboard, login -->
				<nav class="flex items-center justify-between mb-4">
					<div>
						<img src={avatarUrl} alt={journalTitle} class="w-10 h-10" />
					</div>
				</nav>

				<!-- Main navigation with dropdown menus -->
				<div class="flex items-center justify-between">
					<!-- Standard navigation links -->
					<div class="flex gap-x-4 text-sm">
						<a href="/" class="text-white hover:text-white/80">Home</a>
						{
							navigationTargets?.map((target) => {
								if (!target) return null;
								const pubType = target?.pubType?.name;

								if (pubType === "Navigation Link") {
									const url = getStringFieldValue(target, "URL");
									if (!url) return null;

									return (
										<a href={url} class="text-white hover:text-white/80">
											{target.title}
										</a>
									);
								} else if (pubType === "Navigation Menu") {
									return <NavMenu navPub={target} client:load />;
								} else {
									const slug = getStringFieldValue(target, "Slug");
									if (!slug) return null;

									return (
										<a href={`/${slug}`} class="text-white hover:text-white/80">
											{target.title}
										</a>
									);
								}
							})
						}
					</div>
				</div>
			</div>
		</div>

		<slot />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
