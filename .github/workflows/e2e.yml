on:
    workflow_call:
        inputs:
            image-tag-override: # example: latest, 7037e37a18a379d583164441baff9e594cc479f8
                type: string # use this to force a container version.
        secrets:
            AWS_ACCESS_KEY_ID:
                required: true
            AWS_SECRET_ACCESS_KEY:
                required: true

env:
    CI: true
    AWS_REGION: us-east-1

    ECR_REPOSITORY_PREFIX: pubpub-v7
    CONTAINER_NAME: core

jobs:
    integration-tests:
        name: Integration tests
        runs-on: ubuntu-latest

        strategy:
            matrix:
                package:
                    - core
                    - context-editor
        env:
            ENV_FILE: .env.docker-compose.dev
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install Node.js
              uses: actions/setup-node@v5
              with:
                  node-version: 22.13.1

            - uses: pnpm/action-setup@v4
              name: Install pnpm
              with:
                  run_install: false

            - name: Get pnpm store directory
              id: get-store-path
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

            - name: Setup pnpm cache
              # since this always runs after CI, there's no need to save the cache afterwards, since it's guaranteed to be the same
              uses: actions/cache/restore@v4
              with:
                  path: ${{ steps.get-store-path.outputs.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            # mostly to skip preconstruct build
            - name: Setup turbo cache
              uses: actions/cache/restore@v4
              with:
                  path: .turbo
                  key: ${{ runner.os }}-turbo-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-turbo-

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ vars.IAM_ROLE_TO_ASSUME }}
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Get image tag based on SHA
              id: gettag
              # use shell substitution
              run: echo "tag=$(git describe --always --abbrev=40 --dirty)" >> $GITHUB_OUTPUT

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Get image labels
              id: label
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ steps.gettag.outputs.tag }}
              run: |
                  echo "core_label=$ECR_REGISTRY/${ECR_REPOSITORY_NAME_OVERRIDE:-$ECR_REPOSITORY_PREFIX-core}:$IMAGE_TAG" >> $GITHUB_OUTPUT
                  echo "jobs_label=$ECR_REGISTRY/${ECR_REPOSITORY_NAME_OVERRIDE:-$ECR_REPOSITORY_PREFIX-jobs}:$IMAGE_TAG" >> $GITHUB_OUTPUT
                  echo "base_label=$ECR_REGISTRY/$ECR_REPOSITORY_PREFIX:$IMAGE_TAG" >> $GITHUB_OUTPUT
                  echo "site_builder_label=$ECR_REGISTRY/${ECR_REPOSITORY_NAME_OVERRIDE:-$ECR_REPOSITORY_PREFIX-site-builder}:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Install dependencies
              run: pnpm install --frozen-lockfile --prefer-offline

            - name: Start up db images
              run: pnpm test:setup

            - name: p:build
              run: pnpm p:build

            - name: Run migrations and seed
              run: pnpm --filter core reset-base
              env:
                  # 20241126: this prevents the arcadia seed from running, which contains a ton of pubs which potentially might slow down the tests
                  MINIMAL_SEED: true
                  SKIP_VALIDATION: true

            - run: pnpm --filter core exec playwright install --with-deps

            - name: Start up core etc
              run: pnpm integration:setup
              env:
                  INTEGRATION_TESTS_IMAGE: ${{steps.label.outputs.core_label}}
                  SITE_BUILDER_IMAGE: ${{steps.label.outputs.site_builder_label}}
                  JOBS_IMAGE: ${{steps.label.outputs.jobs_label}}

            - name: Log out Container ID for health check
              id: log-container-id
              run: echo "CONTAINER_ID=$(docker compose -f docker-compose.test.yml ps integration-tests -q)" >> $GITHUB_OUTPUT

            - name: Wait until container is healthy
              run: while [ "`docker inspect -f {{.State.Health.Status}} ${{steps.log-container-id.outputs.CONTAINER_ID}}`" != "healthy" ]; do     sleep .2; done

            - name: Run integration tests
              run: pnpm playwright:test --filter ${{ matrix.package }} --env-mode=loose
              env:
                  NODE_ENV: test
                  INTEGRATION_TEST_HOST: localhost
                  DATABASE_URL: postgresql://postgres:postgres@localhost:54322/postgres

            - name: Print container logs
              if: ${{failure() || cancelled()}}
              run: docker compose -f docker-compose.test.yml --profile integration logs -t
              env:
                  INTEGRATION_TESTS_IMAGE: ${{steps.label.outputs.core_label}}
                  SITE_BUILDER_IMAGE: ${{steps.label.outputs.site_builder_label}}
                  JOBS_IMAGE: ${{steps.label.outputs.jobs_label}}

            - name: Upload core playwright snapshots artifact
              if: failure() && matrix.package == 'core'
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-snapshots
                  path: core/test-results
                  retention-days: 10

            - name: Upload context-editor playwright snapshots artifact
              if: failure() && matrix.package == 'context-editor'
              uses: actions/upload-artifact@v4
              with:
                  name: playwright-snapshots
                  path: packages/context-editor/test-results
                  retention-days: 10
