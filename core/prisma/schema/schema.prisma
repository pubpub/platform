// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider        = "prisma-dbml-generator"
  previewFeatures = ["prismaSchemaFolder"]
  output          = "."
}

generator comments {
  provider = "pnpm exec tsx prisma/scripts/comment-generator.mts"
}

model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  slug          String   @unique
  email         String   @unique
  firstName     String
  lastName      String?
  orcid         String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  isSuperAdmin  Boolean  @default(false)
  passwordHash  String?
  isVerified    Boolean  @default(false)
  /// Indicates whether a user is provisional, meaning they were added through an invite and need to accept it to become a full user
  isProvisional Boolean  @default(false)

  memberGroups         MemberGroup[]
  AuthToken            AuthToken[]
  actionRuns           ActionRun[]
  ApiAccessToken       ApiAccessToken[]
  Session              Session[]
  communityMemberships CommunityMembership[]
  pubMemberships       PubMembership[]
  stageMemberships     StageMembership[]
  PubValueHistory      PubValueHistory[]
  InvitedUser          Invite[]              @relation("invited_user")
  InvitedByUser        Invite[]              @relation("invited_by")
  InviteHistory        InviteHistory[]

  @@map(name: "users")
}

model Session {
  id        String        @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  expiresAt DateTime
  /// With what type of token is this session created? Used for determining on a page-by-page basis whether to allow a certain session to access it. For instance, a verify email token/session should not allow you to access the password reset page.
  type      AuthTokenType @default(generic)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map(name: "sessions")
}

model AuthToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  expiresAt DateTime // Tokens expire within 1 week...
  isUsed    Boolean       @default(false) // ...or after one use
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  type      AuthTokenType @default(generic)

  @@map(name: "auth_tokens")
}

/// @property generic - For most use-cases. This will just authenticate you with a regular session.
/// @property passwordReset - For resetting your password only
/// @property signup - For signing up, but also when you're invited to a community
/// @property verifyEmail - For verifying your email address
enum AuthTokenType {
  generic
  passwordReset
  signup
  verifyEmail
}

model Community {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  slug      String   @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  pubTypes            PubType[]
  pubs                Pub[]
  memberGroups        MemberGroup[]
  stages              Stage[]
  APIAccessToken      ApiAccessToken[]
  Form                Form[]
  pubFields           PubField[]
  members             CommunityMembership[]
  Invite              Invite[]
  ActionConfigDefault ActionConfigDefault[]

  @@map(name: "communities")
}

model Pub {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  valuesBlob  Json?
  pubType     PubType   @relation(fields: [pubTypeId], references: [id])
  pubTypeId   String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  // updatedAt is also updated once a value is updated
  updatedAt   DateTime  @default(now()) @updatedAt
  // title is updated through trigger functions on the pub_values table
  // and the _PubFieldToPubType table
  // do not attempt to set this manually
  title       String?

  values        PubValue[]      @relation("original_pub")
  stages        PubsInStages[]
  actionRuns    ActionRun[]
  relatedValues PubValue[]      @relation("related_pub")
  members       PubMembership[]

  searchVector Unsupported("tsvector")?
  Invite       Invite[]

  @@index([searchVector], type: Gin)
  @@map(name: "pubs")
}

model PubField {
  id               String          @id @default(dbgenerated("gen_random_uuid()"))
  name             String
  slug             String          @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  schema           PubFieldSchema? @relation(fields: [pubFieldSchemaId], references: [id])
  schemaName       CoreSchemaType?
  pubFieldSchemaId String?
  isArchived       Boolean         @default(false)
  community        Community       @relation(fields: [communityId], references: [id])
  communityId      String
  isRelation       Boolean         @default(false)

  values    PubValue[]
  pubTypes  PubFieldToPubType[]
  FormInput FormElement[]

  @@map(name: "pub_fields")
}

enum CoreSchemaType {
  Boolean
  DateTime
  Email
  FileUpload
  MemberId
  Null
  Number
  NumericArray
  RichText
  String
  StringArray
  URL
  Vector3
  Color
}

model PubFieldSchema {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  namespace String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // This must be a dereferenced JSONSchema. We should find a way to validate.
  schema    Json /// @type(JSONSchemaType<any>, 'ajv', true, false, true)
  PubFields PubField[]

  @@unique([name, namespace], name: "schema_identifier")
}

model PubValue {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  /// @type(LastModifiedBy, '../types', true, false, true)
  lastModifiedBy String
  field          PubField @relation(fields: [fieldId], references: [id])
  fieldId        String
  value          Json?
  pub            Pub      @relation(fields: [pubId], references: [id], onDelete: Cascade, name: "original_pub")
  pubId          String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  relatedPub     Pub?     @relation(fields: [relatedPubId], references: [id], onDelete: Cascade, name: "related_pub")
  relatedPubId   String?

  // Rank is only used for ordering multiple related pubs for a single field, not for ordering
  // values within a pub
  rank String? // Uses "C" collation

  @@map(name: "pub_values")
}

enum OperationType {
  insert
  update
  delete
}

model PubType {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  description String?
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  fields       PubFieldToPubType[]
  pubs         Pub[]
  Form         Form[]
  formElements FormElement[]

  @@unique([name, communityId])
  @@map(name: "pub_types")
}

model PubFieldToPubType {
  A         String
  B         String
  // when this changes, a trigger is run to update the title of all pubs in that pubType
  // see migrations/20241210172906_trigger_for_changing_is_title/migration.sql
  isTitle   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  pubField PubField @relation(fields: [A], references: [id], onUpdate: Cascade, onDelete: Cascade)
  pubType  PubType  @relation(fields: [B], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([A, B], name: "_PubFieldToPubType_AB_unique")
  @@index([B], name: "_PubFieldToPubType_B_index")
  @@map(name: "_PubFieldToPubType")
}

model Stage {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  order       String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  pubs                  PubsInStages[]
  moveConstraints       MoveConstraint[]  @relation("move_constraint")
  moveConstraintSources MoveConstraint[]  @relation("move_constraint_destination")
  actionInstances       ActionInstance[]
  formElements          FormElement[]
  members               StageMembership[]
  Invite                Invite[]

  @@map(name: "stages")
}

model PubsInStages {
  pub       Pub      @relation(fields: [pubId], references: [id], onDelete: Cascade)
  pubId     String
  stage     Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([pubId, stageId])
}

model MoveConstraint {
  stage         Stage    @relation("move_constraint", fields: [stageId], references: [id], onDelete: Cascade)
  stageId       String
  destination   Stage    @relation("move_constraint_destination", fields: [destinationId], references: [id], onDelete: Cascade)
  destinationId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  @@id([stageId, destinationId], name: "moveConstraintId")
  @@map(name: "move_constraint")
}

model ActionInstance {
  id        String      @id @default(dbgenerated("gen_random_uuid()"))
  name      String      @default("")
  action    Action
  stage     Stage       @relation(fields: [stageId], references: [id], onDelete: Cascade)
  stageId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  config    Json?
  rules     Rule[]
  runs      ActionRun[]
  watchedBy Rule[]      @relation("source_action_instance")

  @@map(name: "action_instances")
}

enum Action {
  log
  pdf
  email
  pushToV6
  http
  move
  googleDriveImport
  datacite
}

model ActionConfigDefault {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String
  action      Action
  config      Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@unique([communityId, action], name: "action_config_defaults_communityId_action_key")
  @@map(name: "action_config_defaults")
}

model ActionRun {
  id               String            @id @default(dbgenerated("gen_random_uuid()"))
  actionInstance   ActionInstance?   @relation(fields: [actionInstanceId], references: [id], onDelete: Cascade)
  actionInstanceId String?
  pub              Pub?              @relation(fields: [pubId], references: [id])
  pubId            String?
  config           Json?
  event            Event?
  params           Json?
  status           ActionRunStatus
  result           Json
  user             User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId           String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  PubValueHistory  PubValueHistory[]

  // action run that triggered this action run
  sourceActionRunId String?
  sourceActionRun   ActionRun? @relation("source_action_run", fields: [sourceActionRunId], references: [id], onDelete: SetNull)

  // action runs that were triggered by this action run
  sequentialActionRuns ActionRun[]     @relation("source_action_run")
  InvitedByActionRun   Invite[]        @relation("invited_by_action_run")
  InviteHistory        InviteHistory[]

  @@map(name: "action_runs")
}

enum ActionRunStatus {
  scheduled
  success
  failure
}

model Rule {
  id                     String          @id @default(dbgenerated("gen_random_uuid()"))
  event                  Event
  actionInstance         ActionInstance  @relation(fields: [actionInstanceId], references: [id], onDelete: Cascade)
  actionInstanceId       String
  config                 Json?
  // as the trigger for "actionSucceeded" or "actionFailed"
  sourceActionInstanceId String?
  sourceActionInstance   ActionInstance? @relation("source_action_instance", fields: [sourceActionInstanceId], references: [id], onDelete: SetNull)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @default(now()) @updatedAt

  @@map(name: "rules")
}

enum Event {
  pubEnteredStage
  pubLeftStage
  pubInStageForDuration
  actionSucceeded
  actionFailed
}

enum FormAccessType {
  private
  public
}

model Form {
  id          String         @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  slug        String
  communityId String
  community   Community      @relation(fields: [communityId], references: [id], onDelete: Cascade)
  pubType     PubType        @relation(fields: [pubTypeId], references: [id])
  pubTypeId   String
  elements    FormElement[]
  isArchived  Boolean        @default(false)
  access      FormAccessType @default(private)
  isDefault   Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now()) @updatedAt

  inviteForms         InviteForm[]
  StageMembership     StageMembership[]
  CommunityMembership CommunityMembership[]
  PubMembership       PubMembership[]

  @@unique([name, communityId])
  @@unique([slug, communityId])
  // FIXME: https://github.com/prisma/prisma/issues/6974
  // Unique index manually set in migration
  // @@unique([isDefault, pubTypeId], where: { isDefault: true })
  @@map(name: "forms")
}

// Supported structural elements in the form builder
enum StructuralFormElement {
  h2
  h3
  p
  hr
}

enum ElementType {
  pubfield
  structural
  button
}

enum InputComponent {
  textArea
  textInput
  datePicker
  checkbox
  fileUpload
  memberSelect
  confidenceInterval
  checkboxGroup
  radioGroup
  richText
  selectDropdown
  multivalueInput
  relationBlock
  colorPicker
}

// Either a structural element like a header, hr etc. or a pubfield input
model FormElement {
  id              String                 @id @default(dbgenerated("gen_random_uuid()"))
  type            ElementType
  fieldId         String?
  field           PubField?              @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  formId          String
  rank            String // Uses "C" collation
  // label is only used by elements with type: ElementType.button. Pubfield inputs put everything in config
  label           String?
  element         StructuralFormElement?
  component       InputComponent?
  config          Json?
  content         String?
  required        Boolean?
  form            Form                   @relation(fields: [formId], references: [id], onDelete: Cascade)
  stage           Stage?                 @relation(fields: [stageId], references: [id], onDelete: SetNull)
  stageId         String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @default(now()) @updatedAt
  relatedPubTypes PubType[]

  @@unique([type, label, formId])
  @@unique([fieldId, formId])
  @@map(name: "form_elements")
}

model ApiAccessToken {
  id              String                @id @default(dbgenerated("gen_random_uuid()"))
  token           String                @unique
  name            String
  description     String?
  communityId     String
  community       Community             @relation(fields: [communityId], references: [id], onDelete: Cascade)
  expiration      DateTime
  issuedBy        User?                 @relation(fields: [issuedById], references: [id], onDelete: SetNull)
  issuedById      String?
  issuedAt        DateTime              @default(now())
  updatedAt       DateTime              @default(now()) @updatedAt
  accessRules     ApiAccessPermission[]
  logs            ApiAccessLog[]
  PubValueHistory PubValueHistory[]
  InviteHistory   InviteHistory[]

  @@index([token], name: "token_idx")
  @@map(name: "api_access_tokens")
}

model ApiAccessLog {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  accessTokenId String?
  accessToken   ApiAccessToken? @relation(fields: [accessTokenId], references: [id], onDelete: SetNull)
  timestamp     DateTime        @default(now())
  action        String

  @@map(name: "api_access_logs")
}

enum ApiAccessType {
  read
  write
  archive
}

// A permission existing for a scope means that the user has access to that scope
// notwithstanding the contraints
model ApiAccessPermission {
  id               String         @id @default(dbgenerated("gen_random_uuid()"))
  apiAccessTokenId String
  apiAccessToken   ApiAccessToken @relation(fields: [apiAccessTokenId], references: [id], onDelete: Cascade)
  scope            ApiAccessScope
  accessType       ApiAccessType
  constraints      Json? /// @type(ApiAccessPermissionConstraints, '../types', true, false, true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt

  // this ensures that only one permission per token and scope and access type exists
  @@index([apiAccessTokenId, scope, accessType], name: "api_access_permissions_idx")
  @@map(name: "api_access_permissions")
}

enum ApiAccessScope {
  community
  pub
  stage
  member
  pubType
}

/// Status of an invite
/// @property created - The invite has been created, but not yet sent
/// @property pending - The invite has been sent, but not yet accepted
/// @property accepted - The invite has been accepted, but the relevant signup step has not been completed
/// @property completed - The invite has been accepted, and the relevant signup step has been completed
/// @property rejected - The invite has been rejected
/// @property revoked - The invite has been revoked by the user who created it, or by a sufficient authority
enum InviteStatus {
  created
  pending
  accepted
  completed
  rejected
  revoked
}

// invites are invitations to join a community
// invites can be for existing users, or for new users, but not both
// invites can bestow certain memberships on the user after the user joins the community
// NOTE: this table has a history table.
model Invite {
  id             String @id @default(dbgenerated("gen_random_uuid()"))
  /// @type(LastModifiedBy, '../types', true, false, true)
  lastModifiedBy String

  InvitedUser User   @relation("invited_user", fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  token     String   @unique
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // community level permissions
  // an invite must be for a community, and must have a community membership level set
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  communityId String

  // which role should be granted to the user after they join the community
  communityRole MemberRole @default(contributor)

  // you can also directly invite a user to a pub or stage, but not both
  // you can then also immediately allow them to use a certain form at that level
  Pub     Pub?        @relation(fields: [pubId], references: [id], onDelete: SetNull)
  pubId   String?
  pubRole MemberRole?

  Stage     Stage?      @relation(fields: [stageId], references: [id], onDelete: SetNull)
  stageId   String?
  stageRole MemberRole?

  // the message that is sent in the invite. useful for resending invites
  message    String?
  // when is the message last sent. total send count is kept track of by the invite history table
  lastSentAt DateTime?

  status InviteStatus @default(created)

  // useful to keep track of who invited the user. slightly different from `lastModifiedBy`
  InvitedByUser        User?      @relation("invited_by", fields: [invitedByUserId], references: [id], onDelete: SetNull)
  invitedByUserId      String?
  InvitedByActionRun   ActionRun? @relation("invited_by_action_run", fields: [invitedByActionRunId], references: [id], onDelete: SetNull)
  invitedByActionRunId String?

  forms InviteForm[]

  // this table has some constraints that make it conform to the type in `db/types/Invite.ts`
  // see core/prisma/migrations/20250402130740_create_invite_table/migration.sql for details
  @@map(name: "invites")
}

model InviteForm {
  invite    Invite         @relation(fields: [inviteId], references: [id], onDelete: Cascade)
  inviteId  String
  form      Form           @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId    String
  type      MembershipType
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  // ensure pub/stage forms only exist when pub or stage is set

  // has check constraint to ensure pub/stage forms only exist when pub or stage is set
  // see core/prisma/migrations/20250407090041_reference_multiple_forms_in_invite/migration.sql for details

  @@id([inviteId, formId, type])
  @@unique([inviteId, formId, type])
  @@map(name: "invite_forms")
}
