enum MemberRole {
    // community-wide administrator
    admin
    // regular member
    editor
    // contributor
    contributor
}

model MemberGroup {
    id          String    @id @default(dbgenerated("gen_random_uuid()"))
    community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
    communityId String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @default(now()) @updatedAt

    users                User[]
    communityMemberships CommunityMembership[]
    pubMemberships       PubMembership[]
    stageMemberships     StageMembership[]

    @@map(name: "member_groups")
}

model CommunityMembership {
    id            String       @id @default(dbgenerated("gen_random_uuid()"))
    role          MemberRole
    community     Community    @relation(fields: [communityId], references: [id], onDelete: Cascade)
    communityId   String
    user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    memberGroup   MemberGroup? @relation(fields: [memberGroupId], references: [id], onDelete: Cascade)
    memberGroupId String?
    // This table has a check constraint requiring that exactly one of userId or memberGroupId is set
    // See core/prisma/migrations/20241017223037_add_new_membership_tables/migration.sql for details
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @default(now()) @updatedAt
    form          Form?        @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId        String?

    // Indices defined manually in migration to handle null formId case
    // @@unique([communityId, userId, formId])
    // @@unique([communityId, memberGroupId, formId])
    @@map(name: "community_memberships")
}

model PubMembership {
    id            String       @id @default(dbgenerated("gen_random_uuid()"))
    role          MemberRole
    pub           Pub          @relation(fields: [pubId], references: [id], onDelete: Cascade)
    pubId         String
    user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    memberGroup   MemberGroup? @relation(fields: [memberGroupId], references: [id], onDelete: Cascade)
    memberGroupId String?
    form          Form?        @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId        String?

    // This table has a check constraint requiring that exactly one of userId or memberGroupId is set
    // See core/prisma/migrations/20241017223037_add_new_membership_tables/migration.sql for details
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Indices defined manually in migration to handle null formId case
    // @@unique([pubId, userId, formId])
    // @@unique([pubId, memberGroupId, formId])
    @@map(name: "pub_memberships")
}

model StageMembership {
    id            String       @id @default(dbgenerated("gen_random_uuid()"))
    role          MemberRole
    stage         Stage        @relation(fields: [stageId], references: [id], onDelete: Cascade)
    stageId       String
    user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String?
    memberGroup   MemberGroup? @relation(fields: [memberGroupId], references: [id], onDelete: Cascade)
    memberGroupId String?
    form          Form?        @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId        String?

    // This table has a check constraint requiring that exactly one of userId or memberGroupId is set
    // See core/prisma/migrations/20241017223037_add_new_membership_tables/migration.sql for details
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    // Indices defined manually in migration to handle null formId case
    // @@unique([stageId, userId, formId])
    // @@unique([stageId, memberGroupId, formId])
    @@map(name: "stage_memberships")
}

enum MembershipType {
    community
    stage
    pub
}

model MembershipCapabilities {
    role       MemberRole
    type       MembershipType
    capability Capabilities

    @@id([role, type, capability])
    @@map(name: "membership_capabilities")
}
