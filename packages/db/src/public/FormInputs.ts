import type { ColumnType, Insertable, Selectable, Updateable } from "kysely";

import { z } from "zod";

import type { FormsId } from "./Forms";
import type { InputComponent } from "./InputComponent";
import type { PubFieldsId } from "./PubFields";
import { formsIdSchema } from "./Forms";
import { inputComponentSchema } from "./InputComponent";
import { pubFieldsIdSchema } from "./PubFields";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.form_inputs */
export type FormInputsId = string & { __brand: "FormInputsId" };

/** Represents the table public.form_inputs */
export interface FormInputsTable {
	id: ColumnType<FormInputsId, FormInputsId | undefined, FormInputsId>;

	fieldId: ColumnType<PubFieldsId | null, PubFieldsId | null, PubFieldsId | null>;

	formId: ColumnType<FormsId, FormsId, FormsId>;

	rank: ColumnType<string, string, string>;

	component: ColumnType<InputComponent, InputComponent, InputComponent>;

	config: ColumnType<unknown | null, unknown | null, unknown | null>;

	required: ColumnType<boolean | null, boolean | null, boolean | null>;

	createdAt: ColumnType<Date, Date | string | undefined, Date | string>;

	updatedAt: ColumnType<Date, Date | string | undefined, Date | string>;
}

export type FormInputs = Selectable<FormInputsTable>;

export type NewFormInputs = Insertable<FormInputsTable>;

export type FormInputsUpdate = Updateable<FormInputsTable>;

export const formInputsIdSchema = z.string().uuid() as unknown as z.Schema<FormInputsId>;

export const formInputsSchema = z.object({
	id: formInputsIdSchema,
	fieldId: pubFieldsIdSchema.nullable(),
	formId: formsIdSchema,
	rank: z.string(),
	component: inputComponentSchema,
	config: z.unknown().nullable(),
	required: z.boolean().nullable(),
	createdAt: z.date(),
	updatedAt: z.date(),
});

export const formInputsInitializerSchema = z.object({
	id: formInputsIdSchema.optional(),
	fieldId: pubFieldsIdSchema.optional().nullable(),
	formId: formsIdSchema,
	rank: z.string(),
	component: inputComponentSchema,
	config: z.unknown().optional().nullable(),
	required: z.boolean().optional().nullable(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
});

export const formInputsMutatorSchema = z.object({
	id: formInputsIdSchema.optional(),
	fieldId: pubFieldsIdSchema.optional().nullable(),
	formId: formsIdSchema.optional(),
	rank: z.string().optional(),
	component: inputComponentSchema.optional(),
	config: z.unknown().optional().nullable(),
	required: z.boolean().optional().nullable(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
});
