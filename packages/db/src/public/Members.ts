import type { ColumnType, Insertable, Selectable, Updateable } from "kysely";

import { z } from "zod";

import type { CommunitiesId } from "./Communities";
import type { MemberRole } from "./MemberRole";
import type { UsersId } from "./Users";
import { communitiesIdSchema } from "./Communities";
import { memberRoleSchema } from "./MemberRole";
import { usersIdSchema } from "./Users";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.members */
export type MembersId = string & { __brand: "MembersId" };

/** Represents the table public.members */
export interface MembersTable {
	id: ColumnType<MembersId, MembersId | undefined, MembersId>;

	createdAt: ColumnType<Date, Date | string | undefined, Date | string>;

	updatedAt: ColumnType<Date, Date | string | undefined, Date | string>;

	communityId: ColumnType<CommunitiesId, CommunitiesId, CommunitiesId>;

	userId: ColumnType<UsersId, UsersId, UsersId>;

	role: ColumnType<MemberRole, MemberRole | undefined, MemberRole>;
}

export type Members = Selectable<MembersTable>;

export type NewMembers = Insertable<MembersTable>;

export type MembersUpdate = Updateable<MembersTable>;

export const membersIdSchema = z.string().uuid() as unknown as z.Schema<MembersId>;

export const membersSchema = z.object({
	id: membersIdSchema,
	createdAt: z.date(),
	updatedAt: z.date(),
	communityId: communitiesIdSchema,
	userId: usersIdSchema,
	role: memberRoleSchema,
});

export const membersInitializerSchema = z.object({
	id: membersIdSchema.optional(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
	communityId: communitiesIdSchema,
	userId: usersIdSchema,
	role: memberRoleSchema.optional(),
});

export const membersMutatorSchema = z.object({
	id: membersIdSchema.optional(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
	communityId: communitiesIdSchema.optional(),
	userId: usersIdSchema.optional(),
	role: memberRoleSchema.optional(),
});
