import type { ColumnType, Insertable, Selectable, Updateable } from "kysely";

import { z } from "zod";

import type { PubsId } from "./Pubs";
import type { StagesId } from "./Stages";
import type { UsersId } from "./Users";
import { pubsIdSchema } from "./Pubs";
import { stagesIdSchema } from "./Stages";
import { usersIdSchema } from "./Users";

// @generated
// This file is automatically generated by Kanel. Do not modify manually.

/** Identifier type for public.action_move */
export type ActionMoveId = string & { __brand: "ActionMoveId" };

/** Represents the table public.action_move */
export interface ActionMoveTable {
	id: ColumnType<ActionMoveId, ActionMoveId | undefined, ActionMoveId>;

	sourceStageId: ColumnType<StagesId, StagesId, StagesId>;

	destinationStageId: ColumnType<StagesId, StagesId, StagesId>;

	pubId: ColumnType<PubsId, PubsId, PubsId>;

	userId: ColumnType<UsersId, UsersId, UsersId>;

	note: ColumnType<string, string, string>;

	createdAt: ColumnType<Date, Date | string | undefined, Date | string>;

	updatedAt: ColumnType<Date, Date | string | undefined, Date | string>;
}

export type ActionMove = Selectable<ActionMoveTable>;

export type NewActionMove = Insertable<ActionMoveTable>;

export type ActionMoveUpdate = Updateable<ActionMoveTable>;

export const actionMoveIdSchema = z.string().uuid() as unknown as z.Schema<ActionMoveId>;

export const actionMoveSchema = z.object({
	id: actionMoveIdSchema,
	sourceStageId: stagesIdSchema,
	destinationStageId: stagesIdSchema,
	pubId: pubsIdSchema,
	userId: usersIdSchema,
	note: z.string(),
	createdAt: z.date(),
	updatedAt: z.date(),
});

export const actionMoveInitializerSchema = z.object({
	id: actionMoveIdSchema.optional(),
	sourceStageId: stagesIdSchema,
	destinationStageId: stagesIdSchema,
	pubId: pubsIdSchema,
	userId: usersIdSchema,
	note: z.string(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
});

export const actionMoveMutatorSchema = z.object({
	id: actionMoveIdSchema.optional(),
	sourceStageId: stagesIdSchema.optional(),
	destinationStageId: stagesIdSchema.optional(),
	pubId: pubsIdSchema.optional(),
	userId: usersIdSchema.optional(),
	note: z.string().optional(),
	createdAt: z.date().optional(),
	updatedAt: z.date().optional(),
});
